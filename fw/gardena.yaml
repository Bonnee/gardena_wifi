esphome:
  name: $hostname
  on_boot:
    priority: 600
    then:
      - output.turn_on: enable

esp8266:
  board: $board

logger:
  level: INFO
  logs:
    wifi: INFO
    mdns: INFO
    mqtt: INFO

wifi:
  fast_connect: true
  power_save_mode: HIGH
  output_power: 12db
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
globals:
  - id: on_cycles
    type: int
    restore_value: no
    initial_value: '0'
  - id: cycles_run
    type: int
    restore_value: no
    initial_value: '0'

### Watering works in 'cycles' of 20 minutes. The valve will stay open for 20min*on_cycles, decrementing on_cycles at each loop
script:
  - id: run_cycle
    then:
      - if:
          condition:
            lambda: 'return id(on_cycles) > 0;'
          then:
            - logger.log: "Cycles!"
            - if:
                condition: 
                  lambda: 'return id(water_valve).position == COVER_CLOSED;'
                then:
                  - logger.log: "Executing cycle. Opening valve"
                  - cover.open: water_valve
            - mqtt.publish:
                topic: /${devicename}/watering/cycles
                retain: true
                payload:  !lambda |-
                  return std::to_string(id(on_cycles)-1);
            - logger.log: "Executed a cycle."
            - lambda: |-
                id(deep_sleep_1).set_sleep_duration(1200000); // 20min

          else:
            - if:
                condition:
                  lambda: 'return id(water_valve).position == COVER_OPEN;'
                then:
                  - logger.log: "No more cycles. Closing valve"
                  - cover.close: water_valve
                  - lambda: |-
                      id(deep_sleep_1).set_sleep_duration(3600000); // 1h

mqtt:
  broker: mqtt.bonnee.me
    #username:
    #password: 
  topic_prefix: /${devicename}
  birth_message:
    #  topic: /${devicename}/status
    #  payload: online
  will_message:
    #  topic: /${devicename}/status
    #  payload: offline
  on_message:
    - topic: /${devicename}/watering/cycles
      then:
        - logger.log: 
            format: "%u cycles run."
            args: [ 'id(cycles_run)' ]
        - if:
            condition:
              lambda: "return id(cycles_run) == 0;"
            then:
              - lambda: |-
                  id(cycles_run) = 1;
                  id(on_cycles) = abs(stoi(x));
              - logger.log: 
                  format: "Cycles command received. There are a total of %u pending cycles."
                  args: [ 'id(on_cycles)' ]
              - script.execute: run_cycle

    - topic: /${devicename}/esp/ota_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
        - logger.log: "OTA mode active. The device will NOT sleep"
    - topic: /${devicename}/esp/sleep_mode
      payload: 'ON'
      then:
        - deep_sleep.enter: deep_sleep_1
        - logger.log: "Sleep mode active, you can disable it now"

ota:

deep_sleep:
  id: deep_sleep_1
  run_duration: 500ms
  sleep_duration: 1h

web_server:
  port: 80

output:
  - platform: gpio
    pin: $valve_open_gpio
    id: valve_open
  - platform: gpio
    pin: $valve_close_gpio
    id: valve_close
  - platform: gpio
    pin: $enable_gpio
    id: enable

cover:
  - platform: template
    name: "Water Valve"
    id: water_valve
    assumed_state: true
    optimistic: true
    command_retain: true
    open_action:
      - output.turn_off: valve_close
      - output.turn_on: valve_open
      - delay: 250ms
      - output.turn_off: valve_open
      # Remove retained command message to avoid another execution at the next wakeup
      - mqtt.publish:
          topic: /${devicename}/cover/water_valve/command
          retain: true
          payload: 
    close_action:
      - output.turn_off: valve_open
      - output.turn_on: valve_close
      - delay: 63ms
      - output.turn_off: valve_close
      - globals.set: # if the valve was closed, stop keeping it open
          id: on_cycles
          value: '0'
      - mqtt.publish:
          topic: /${devicename}/cover/water_valve/command
          retain: true
          payload:
